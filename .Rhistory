Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Provinces = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
vote_distribution
#tmp
#subset(tmp, substr(Area, 1, 2) == "9.")
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:2)
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
print(tmp)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
vote_distribution
#tmp
#subset(tmp, substr(Area, 1, 2) == "9.")
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
vote_distribution
#tmp
#subset(tmp, substr(Area, 1, 2) == "9.")
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
vote_distribution
#tmp
#subset(tmp, substr(Area, 1, 2) == "9.")
which(!(z == provinces[2]))
which(!(vote_distribution == provinces[2]))
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
vote_distribution
which((vote_distribution == provinces[2]))
#tmp
#subset(tmp, substr(Area, 1, 2) == "9.")
provinces[2]
which((vote_distribution == provinces[2]))
vote_distribution
vote_distribution[1389]
which((vote_distribution$ND == provinces[2]))
vote_distribution
MN_idx = min(which((vote_distribution$ND == provinces[1])))
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following lines
SS_idx = min(which((vote_distribution$ND == provinces[2])))
MN_idx = min(which((vote_distribution$ND == provinces[3])))
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following lines
SS_idx = min(which((vote_distribution$ND == provinces[2])))
MN_idx = min(which((vote_distribution$ND == provinces[3])))
MN_idx = min(which(vote_distribution$ND == provinces[3]))
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following lines
SS_idx = min(which(vote_distribution$ND == provinces[2]))
SS_idx
MN_idx
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following lines
SS_idx = min(which(vote_distribution$ND == provinces[2]))
MN_idx = min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
MN_idx <- min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
#SS_idx <- min(which(vote_distribution$ND == provinces[2]))
#MN_idx <- min(which(vote_distribution$ND == provinces[3]))
#vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
MN_idx <- min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
MN_idx <- min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),].copy()
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
MN_idx <- min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
FV19TOTA <- read_excel("data/FV19TOTA.xlsx")
FV19TOTA <- FV19TOTA %>% rename("Party" = "Folketingsvalget 2019 efter valgresultat, område og tid",
"Area" = "...2",
"Votes" = "...3")
FV19TOTA$Votes <- as.integer(FV19TOTA$Votes)
characteristics_data <- read_excel("data/PollingDistrictCharacteristics.xlsx",skip=4)
FV19TOTA <- fill(FV19TOTA, "Party", .direction = "down")
Parties <- unique(FV19TOTA$Party)[2:15]
MMCs <- unique(characteristics_data$Storkreds)[2:11]
for (i in 1:length(MMCs))
{
MMCs[i] <- toupper(substr(MMCs[i], 4, nchar(MMCs[i])))
}
provinces = c("HOVEDSTADEN","SJÆLLAND-SYDDANMARK","MIDTJYLLAND-NORDJYLLAND")
addMMCCol <- function(df,vecOfVal)
{
df$MMC <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "MMC"]
if (!(area %in% vecOfVal))
{
df$MMC[row] = NA
}
}
df <- fill(df, "MMC", .direction = "down")
return(df)
}
addProvinceCol <- function(df,vecOfVal)
{
df$Province <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "Province"]
if (!(area %in% vecOfVal))
{
df$Province[row] = NA
}
}
df <- fill(df, "Province", .direction = "down")
return(df)
}
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- min(which(vote_distribution$ND == provinces[2]))
MN_idx <- min(which(vote_distribution$ND == provinces[3]))
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idx <- which(vote_distribution$ND == provinces[2])
MN_idx <- which(vote_distribution$ND == provinces[3])
vote_distribution <- vote_distribution[-c(SS_idx,MN_idx),]
vote_distribution
vote_distribution <- data.frame()
# Poor performance for this part of this code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i])
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,]
party_df <- bind_rows(party_df,new_df)
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) #Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df)
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idcs <- which(vote_distribution$ND == provinces[2])
MN_idcs <- which(vote_distribution$ND == provinces[3])
vote_distribution <- vote_distribution[-c(SS_idcs,MN_idcs),] # Drops rows based on SS_idcs and MN_idcs
vote_distribution
subset(vote_distribution, Party == "D. Nye Borgerlige" & ND == "8. ROSKILDE")
subset(vote_distribution, Party == "P. Stram Kurs" & Province == "MIDTJYLLAND-NORDJYLLAND")
sum(subset(vote_distribution, Party == "P. Stram Kurs" & Province == "MIDTJYLLAND-NORDJYLLAND")$Votes)
subset(vote_distribution,
Party == "D. Nye Borgerlige" &
ND == "8. ROSKILDE")
sum(subset(vote_distribution,
Party == "P. Stram Kurs" &
Province == "MIDTJYLLAND-NORDJYLLAND")
$Votes)
sum(subset(vote_distribution,
Party == "P. Stram Kurs" &
Province == "MIDTJYLLAND-NORDJYLLAND")
$Votes)
sum(subset(vote_distribution,
Party == "P. Stram Kurs" &
Province == "MIDTJYLLAND-NORDJYLLAND")
$Votes)
