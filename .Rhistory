allocated_constituency_seats
Parties
allocated_seats <- allocated_constituency_seats + allocated_leveling_seats
constituency_seats <- c(16, 11, 10, 2, 20, 12, 18, 18, 13, 15) # Contains number of constituency seats for each MMC
# Vector containing the combined number of constituency seats for each party
allocated_constituency_seats <- c(1:length(Parties)) * 0
for (i in 1:length(MMCs))
{
votes <- c()
# Creates a vector of the number of votes each party got in the corresponding MMC
for (j in 1:length(Parties))
{
votes <- c(votes, sum(subset(vote_distribution,
Party == Parties[j] &
MMC == MMCs[i])
$Votes))
}
MMC_seats <- d_Hondt(Parties, votes, constituency_seats[i]) # Allocates seats based on d'Hondt's method
allocated_constituency_seats <-  allocated_constituency_seats + MMC_seats # Adds newly allocated seats to the total
}
Parties
constituency_seats <- c(16, 11, 10, 2, 20, 12, 18, 18, 13, 15) # Contains number of constituency seats for each MMC
# Vector containing the combined number of constituency seats for each party
allocated_constituency_seats <- c(1:length(Parties)) * 0
for (i in 1:length(MMCs))
{
votes <- c()
# Creates a vector of the number of votes each party got in the corresponding MMC
for (j in 1:length(Parties))
{
votes <- c(votes, sum(subset(vote_distribution,
Party == Parties[j] &
MMC == MMCs[i])
$Votes))
}
MMC_seats <- d_Hondt(Parties, votes, constituency_seats[i]) # Allocates seats based on d'Hondt's method
allocated_constituency_seats <-  allocated_constituency_seats + MMC_seats # Adds newly allocated seats to the total
}
allocated_constituency_seats
Parties
# Find parties that qualify
qualified_parties <- c()
for (i in 1:length(Parties)) # Iterates through parties and adds the party to qualified_parties if one of the criteria is met
{
# Checks if party got a constituency seat
if (constituency_seat_qualification(i,allocated_constituency_seats))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least as many votes as the mean number of votes given in a province per constituency seat in 2 provinces.
else if (two_thirds_over_mean_qualification())
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least 2% of the votes nationwide
else if (percentage_qualification(Parties[i],vote_distribution))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
}
# Calculates "price per seat".
all_qualified_votes <- sum(subset(vote_distribution,
Party %in% qualified_parties)
$Votes)
seat_key <- all_qualified_votes / 175 # Since no nonpartisan politicians (løsgængere) were elected, the divisor is 175.
allocated_leveling_seats <- c(1:length(Parties)) * 0
remainders <- c(1:length(Parties)) * 0
for (i in 1:length(Parties))
{
if (Parties[i] %in% qualified_parties)
{
party_votes <- sum(subset(vote_distribution,
Party == Parties[i])
$Votes)
floored_q <- floor(party_votes / seat_key)
remainders[i] <- party_votes / seat_key - floored_q
party_leveling_seats <- floored_q - allocated_constituency_seats[i]
allocated_leveling_seats[i] <- party_leveling_seats
}
}
# Remainder of seats get allocated based on greatest remainder
leveling_seats <- c(11, 15, 14)
total_leveling_seats <- sum(leveling_seats)
seats_diff <- total_leveling_seats - sum(allocated_leveling_seats)
for (i in 1:length(Parties))
{
if (seats_diff == 0)
{
break
}
gr_idx <- which(remainders == max(remainders))
allocated_leveling_seats[gr_idx] = allocated_leveling_seats[gr_idx] + 1
remainders[gr_idx] = 0
seats_diff = seats_diff - 1
}
allocated_leveling_seats
Parties
allocated_seats <- allocated_constituency_seats + allocated_leveling_seats
allocated_seats
Parties
allocated_seats <- data.frame("Party" = Parties, "Seats" = c(1:length(Parties)) * 0)
allocated_seats
allocated_seats <- data.frame("Party" = Parties,
"Seats" = allocated_constituency_seats + allocated_leveling_seats)
allocated_seats <- data.frame("Party" = Parties,
"Seats" = allocated_constituency_seats + allocated_leveling_seats)
allocated_seats
sum(allocated_seats$Seats)
allocated_seats$Seats
allocated_seats <- data.frame("Party" = Parties,
"Seats" = allocated_constituency_seats + allocated_leveling_seats)
allocated_seats
allocated_seats <- data.frame("Party" = Parties,
"Total seats" = allocated_constituency_seats + allocated_leveling_seats,
"Constituency seats" = allocated_constituency_seats,
"Leveling seats" = allocated_leveling_seats)
allocated_seats
allocated_seats <- data.frame("Party" = Parties,
"Total_seats" = allocated_constituency_seats + allocated_leveling_seats,
"Constituency_seats" = allocated_constituency_seats,
"Leveling_seats" = allocated_leveling_seats)
allocated_seats
constituency_seats <- c(16, 11, 10, 2, 20, 12, 18, 18, 13, 15) # Contains number of constituency seats for each MMC
# Vector containing the combined number of constituency seats for each party
allocated_constituency_seats <- c(1:length(Parties)) * 0
for (i in 1:length(MMCs))
{
votes <- c()
# Creates a vector of the number of votes each party got in the corresponding MMC
for (j in 1:length(Parties))
{
votes <- c(votes, sum(subset(vote_distribution,
Party == Parties[j] &
MMC == MMCs[i])
$Votes))
}
MMC_seats <- d_Hondt(Parties, votes, constituency_seats[i]) # Allocates seats based on d'Hondt's method
allocated_constituency_seats <-  allocated_constituency_seats + MMC_seats # Adds newly allocated seats to the total
}
# Find parties that qualify
qualified_parties <- c()
for (i in 1:length(Parties)) # Iterates through parties and adds the party to qualified_parties if one of the criteria is met
{
# Checks if party got a constituency seat
if (constituency_seat_qualification(i,allocated_constituency_seats))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least as many votes as the mean number of votes given in a province per constituency seat in 2 provinces.
else if (two_thirds_over_mean_qualification())
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least 2% of the votes nationwide
else if (percentage_qualification(Parties[i],vote_distribution))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
}
# Calculates "price per seat".
all_qualified_votes <- sum(subset(vote_distribution,
Party %in% qualified_parties)
$Votes)
seat_key <- all_qualified_votes / 175 # Since no nonpartisan politicians (løsgængere) were elected, the divisor is 175.
allocated_leveling_seats <- c(1:length(Parties)) * 0
remainders <- c(1:length(Parties)) * 0
for (i in 1:length(Parties))
{
if (Parties[i] %in% qualified_parties)
{
party_votes <- sum(subset(vote_distribution,
Party == Parties[i])
$Votes)
floored_q <- floor(party_votes / seat_key)
remainders[i] <- party_votes / seat_key - floored_q
party_leveling_seats <- floored_q - allocated_constituency_seats[i]
allocated_leveling_seats[i] <- party_leveling_seats
}
}
# Remainder of seats get allocated based on greatest remainder
leveling_seats <- c(11, 15, 14)
total_leveling_seats <- sum(leveling_seats)
seats_diff <- total_leveling_seats - sum(allocated_leveling_seats)
for (i in 1:length(Parties))
{
if (seats_diff == 0)
{
break
}
gr_idx <- which(remainders == max(remainders))
allocated_leveling_seats[gr_idx] = allocated_leveling_seats[gr_idx] + 1
remainders[gr_idx] = 0
seats_diff = seats_diff - 1
}
allocated_seats <- data.frame("Party" = Parties,
"Total_seats" = allocated_constituency_seats + allocated_leveling_seats,
"Constituency_seats" = allocated_constituency_seats,
"Leveling_seats" = allocated_leveling_seats)
allocated_seats
knitr::opts_chunk$set(echo = TRUE)
allocated_seats <- data.frame("Party" = Parties,
"Total_seats" = allocated_constituency_seats + allocated_leveling_seats,
"Constituency_seats" = allocated_constituency_seats,
"Leveling_seats" = allocated_leveling_seats)
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
FV19TOTA <- read_excel("data/FV19TOTA.xlsx") # No external preprocessing has been done to the imported data
FV19TOTA <- FV19TOTA %>% rename("Party" = "Folketingsvalget 2019 efter valgresultat, område og tid",
"Area" = "...2",
"Votes" = "...3")
FV19TOTA$Votes <- as.integer(FV19TOTA$Votes)
characteristics_data <- read_excel("data/PollingDistrictCharacteristics.xlsx",skip=4)
FV19TOTA <- fill(FV19TOTA, "Party", .direction = "down")
Parties <- unique(FV19TOTA$Party)[2:15]
MMCs <- unique(characteristics_data$Storkreds)[2:11]
for (i in 1:length(MMCs))
{
MMCs[i] <- toupper(substr(MMCs[i], 4, nchar(MMCs[i])))
}
provinces = c("HOVEDSTADEN","SJÆLLAND-SYDDANMARK","MIDTJYLLAND-NORDJYLLAND")
addMMCCol <- function(df,vecOfVal)
{
df$MMC <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "MMC"]
if (!(area %in% vecOfVal))
{
df$MMC[row] = NA
}
}
df <- fill(df, "MMC", .direction = "down")
return(df)
}
addProvinceCol <- function(df,vecOfVal)
{
df$Province <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "Province"]
if (!(area %in% vecOfVal))
{
df$Province[row] = NA
}
}
df <- fill(df, "Province", .direction = "down")
return(df)
}
vote_distribution <- data.frame()
# Slightly poor performance for this part of the code, but the size of the dataset is not exceptionally big, so it's fine.
for (i in 1:length(Parties))
{
tmp <- subset(FV19TOTA, Party == Parties[i]) # Extract a temporary dataframe from FV19TOTA for the corresponding party
# Add and fill columns for multi-member constituencies and provinces.
tmp <- addMMCCol(tmp,MMCs)
tmp <- addProvinceCol(tmp,provinces)
# Create a dateframe with the desired resulting columns
party_df <- data.frame(Province = as.character(),
MMC = as.character(),
ND = as.character(),
Votes = as.integer(),
stringsAsFactors = FALSE)
# Loop through multi-member constituencies and create sub-data-frames corresponding to the MMC
for (j in 1:length(MMCs))
{
mmc_sliced = subset(tmp, MMC==MMCs[j])
# Build data frame correspoding to MMC
new_df <- data.frame(Province = mmc_sliced$Province,
MMC = mmc_sliced$MMC,
ND = mmc_sliced$Area,
Votes = mmc_sliced$Votes,
stringsAsFactors = FALSE)
new_df <- new_df[!str_detect(new_df$ND, "[a-z]"), ]
new_df <- new_df[-1,] # Remove level of detail smaller than nomination district.
party_df <- bind_rows(party_df,new_df) # Append newly created data frame for MMC to the data frame of entire party
}
party_df$Party = Parties[i]
party_df <- party_df %>% select("Party", everything()) # Move party column to first position
vote_distribution <- bind_rows(vote_distribution,party_df) # Concatenate data frame for party to data frame of all parties
}
# An artifact of the above cleaning is that SJÆLLAND-SYDDANMARK and MIDTJYLLAND-NORDJYLLAND
# are still present in the ND column. They are manually removed with the following 3 lines
SS_idcs <- which(vote_distribution$ND == provinces[2])
MN_idcs <- which(vote_distribution$ND == provinces[3])
vote_distribution <- vote_distribution[-c(SS_idcs,MN_idcs),] # Drops rows based on SS_idcs and MN_idcs
vote_distribution
subset(vote_distribution,
Party == "D. Nye Borgerlige" &
ND == "8. ROSKILDE")
sum(subset(vote_distribution,
Party == "P. Stram Kurs" &
Province == "MIDTJYLLAND-NORDJYLLAND")
$Votes)
# a priority queue would be optimal for this, but it seems that an implementation using standard R results in O(nlogn) insertion time, which makes it no better than an ordered list. Data set size is small, so it does not matter anyways.
# The below implementation is based on an unordered list philosophy that only updates the quotient for the party that gets a seat in an iteration.
d_Hondt <- function (p,v,s)
{
allocated_seats <- c(1:length(p)) * 0 # Initialize a zero-vector of length number of parties for storing allocated seat
div_table <- data.frame("OV" = v, "V"  = v) # data frame for storing quotients
div_table$div = 1
for (i in 1:s)
{
max_idx <- which(div_table$V == max(div_table$V)) # Find party which gets a seat allocated
allocated_seats[max_idx] = allocated_seats[max_idx] + 1 # Allocate seat
divisor <- div_table$div[max_idx] + 1
div_table$div[max_idx] = divisor # Update divisor for party
div_table$V[max_idx] = div_table$OV[max_idx] / divisor; # Assign new quotient to party
}
return(allocated_seats)
}
#d_Hondt(Parties,votes,5)
constituency_seat_qualification <- function(p,acs) # p = index of party of interest, acs = allocated constituency seats
{
return(acs[p] > 0) # Simply checks if party was allocated a constituency seat
}
two_thirds_over_mean_qualification <- function()
{
return(FALSE) # WIP
}
percentage_qualification <- function(P,vd) # p = party of interest, vd = vote distribution data frame
{
total_votes = sum(vd$Votes) # Sum of all votes
party_votes = sum(subset(vd, Party == P)$Votes) # Sum of votes for the specific party of interest
return( (party_votes / total_votes) > 0.02)
}
constituency_seats <- c(16, 11, 10, 2, 20, 12, 18, 18, 13, 15) # Contains number of constituency seats for each MMC
# Vector containing the combined number of constituency seats for each party
allocated_constituency_seats <- c(1:length(Parties)) * 0
for (i in 1:length(MMCs))
{
votes <- c()
# Creates a vector of the number of votes each party got in the corresponding MMC
for (j in 1:length(Parties))
{
votes <- c(votes, sum(subset(vote_distribution,
Party == Parties[j] &
MMC == MMCs[i])
$Votes))
}
MMC_seats <- d_Hondt(Parties, votes, constituency_seats[i]) # Allocates seats based on d'Hondt's method
allocated_constituency_seats <-  allocated_constituency_seats + MMC_seats # Adds newly allocated seats to the total
}
# Find parties that qualify
qualified_parties <- c()
for (i in 1:length(Parties)) # Iterates through parties and adds the party to qualified_parties if one of the criteria is met
{
# Checks if party got a constituency seat
if (constituency_seat_qualification(i,allocated_constituency_seats))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least as many votes as the mean number of votes given in a province per constituency seat in 2 provinces.
else if (two_thirds_over_mean_qualification())
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
# Checks if party got at least 2% of the votes nationwide
else if (percentage_qualification(Parties[i],vote_distribution))
{
qualified_parties <- c(qualified_parties, Parties[i])
next
}
}
# Calculates "price per seat".
all_qualified_votes <- sum(subset(vote_distribution,
Party %in% qualified_parties)
$Votes)
seat_key <- all_qualified_votes / 175 # Since no nonpartisan politicians (løsgængere) were elected, the divisor is 175.
allocated_leveling_seats <- c(1:length(Parties)) * 0
remainders <- c(1:length(Parties)) * 0
for (i in 1:length(Parties))
{
if (Parties[i] %in% qualified_parties)
{
party_votes <- sum(subset(vote_distribution,
Party == Parties[i])
$Votes)
floored_q <- floor(party_votes / seat_key)
remainders[i] <- party_votes / seat_key - floored_q
party_leveling_seats <- floored_q - allocated_constituency_seats[i]
allocated_leveling_seats[i] <- party_leveling_seats
}
}
# Remainder of seats get allocated based on greatest remainder
leveling_seats <- c(11, 15, 14)
total_leveling_seats <- sum(leveling_seats)
seats_diff <- total_leveling_seats - sum(allocated_leveling_seats)
for (i in 1:length(Parties))
{
if (seats_diff == 0)
{
break
}
gr_idx <- which(remainders == max(remainders))
allocated_leveling_seats[gr_idx] = allocated_leveling_seats[gr_idx] + 1
remainders[gr_idx] = 0
seats_diff = seats_diff - 1
}
allocated_seats <- data.frame("Party" = Parties,
"Total_seats" = allocated_constituency_seats + allocated_leveling_seats,
"Constituency_seats" = allocated_constituency_seats,
"Leveling_seats" = allocated_leveling_seats)
allocated_seats
characteristics_data
FV19TOTA
full_join(FV19TOTA, characteristics_data, by = c("x","y"))
FV19TOTA
characteristics_data
characteristics_data$`Valgdistrikt - navn`
new_frame <- FV19TOTA
FV19TOTA$Area
full_join(FV19TOTA, characteristics_data, by = c(Area,`Valgdistrikt - navn`))
characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
characteristics_data
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
full_join(FV19TOTA, characteristics_data, by = c(Area))
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
full_join(FV19TOTA, characteristics_data, by = cArea)
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
full_join(FV19TOTA, characteristics_data, by = "Area")
rough_merged <- full_join(FV19TOTA, characteristics_data, by = "Area")
rough_merged
subset(rough_merged, !is.na(rough_merged$Storkreds)
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
rough_merged <- full_join(FV19TOTA, characteristics_data, by = "Area")
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
rough_merged <- full_join(FV19TOTA, characteristics_data, by = "Area")
subset(rough_merged, !is.na(rough_merged$Storkreds))
sum(subset(rough_merged, !is.na(rough_merged$Storkreds))$Votes)
sum(subset(rough_merged, !is.na(rough_merged$Storkreds))$votes)
subset(rough_merged, !is.na(rough_merged$Storkreds))
subset(rough_merged, !is.na(rough_merged$Storkreds))$Votes
#characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
rough_merged <- full_join(FV19TOTA, characteristics_data, by = "Area")
sum(subset(rough_merged, !is.na(rough_merged$Storkreds))$Votes)
votes_vec <- subset(rough_merged, !is.na(rough_merged$Storkreds))$Votes
votes_vec[1]
votes_vec[2]
votes_vec[999]
votes_vec[9999]
votes_vec[99999]
length(votes_vec)
votes_vec[19831]
votes_vec[19830]
rough_merged
votes_vec <- votes_vec[which(!is_na(votes_vec))]
votes_vec <- votes_vec[which(!is.na(votes_vec))]
length(votes_vec)
sum(votes_vec)
FV19TOTA
subset(rough_merged, !is.na(rough_merged$Storkreds))
FV19TOTA <- read_excel("data/FV19TOTA.xlsx") # No external preprocessing has been done to the imported data
FV19TOTA <- FV19TOTA %>% rename("Party" = "Folketingsvalget 2019 efter valgresultat, område og tid",
"Area" = "...2",
"Votes" = "...3")
FV19TOTA$Votes <- as.integer(FV19TOTA$Votes)
characteristics_data <- read_excel("data/PollingDistrictCharacteristics.xlsx",skip=4)
FV19TOTA <- fill(FV19TOTA, "Party", .direction = "down")
Parties <- unique(FV19TOTA$Party)[2:15]
MMCs <- unique(characteristics_data$Storkreds)[2:11]
for (i in 1:length(MMCs))
{
MMCs[i] <- toupper(substr(MMCs[i], 4, nchar(MMCs[i])))
}
provinces = c("HOVEDSTADEN","SJÆLLAND-SYDDANMARK","MIDTJYLLAND-NORDJYLLAND")
addMMCCol <- function(df,vecOfVal)
{
df$MMC <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "MMC"]
if (!(area %in% vecOfVal))
{
df$MMC[row] = NA
}
}
df <- fill(df, "MMC", .direction = "down")
return(df)
}
addProvinceCol <- function(df,vecOfVal)
{
df$Province <- df$Area
for (row in 1:nrow(df))
{
area <- df[row, "Province"]
if (!(area %in% vecOfVal))
{
df$Province[row] = NA
}
}
df <- fill(df, "Province", .direction = "down")
return(df)
}
characteristics_data <- characteristics_data %>% rename("Area" = "Valgdistrikt - navn")
rough_merged <- full_join(FV19TOTA, characteristics_data, by = "Area")
vote_characteristics <- subset(rough_merged, !is.na(rough_merged$Storkreds))
vote_characteristics
vote_characteristics <- vote_characteristics %>% rename("Polling_district" = "Area")
vote_characteristics
setwd("C:/Users/nicol/Documents/BSc_DS/FYP/FYP4_Danish_General_Elections")
vote_characteristics
